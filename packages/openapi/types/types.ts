/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/accounts/v1/me/': {
    /**
     * Shortcut to `/accounts/v1/{{my customer id}}`.
     *
     * Automatically creates a new customer account if one does not
     * exist for the authenticated user.
     */
    get: operations['accounts_v1_me_retrieve']
  }
  '/auth_configs/cognito/v1/': {
    get: operations['auth_configs_cognito_v1_list']
    post: operations['auth_configs_cognito_v1_create']
  }
  '/auth_configs/cognito/v1/{id}/': {
    get: operations['auth_configs_cognito_v1_retrieve']
    put: operations['auth_configs_cognito_v1_update']
    delete: operations['auth_configs_cognito_v1_destroy']
    patch: operations['auth_configs_cognito_v1_partial_update']
  }
  '/auth_configs/frontegg/v1/': {
    get: operations['auth_configs_frontegg_v1_list']
    post: operations['auth_configs_frontegg_v1_create']
  }
  '/auth_configs/frontegg/v1/{id}/': {
    get: operations['auth_configs_frontegg_v1_retrieve']
    put: operations['auth_configs_frontegg_v1_update']
    delete: operations['auth_configs_frontegg_v1_destroy']
    patch: operations['auth_configs_frontegg_v1_partial_update']
  }
  '/customers/v1/': {
    /** Management API for [Customers](https://docs.ironplans.com/concepts/teams/customers). */
    get: operations['customers_v1_list']
    /** Management API for [Customers](https://docs.ironplans.com/concepts/teams/customers). */
    post: operations['customers_v1_create']
  }
  '/customers/v1/{id}/': {
    /** Management API for [Customers](https://docs.ironplans.com/concepts/teams/customers). */
    get: operations['customers_v1_retrieve']
    /** Management API for [Customers](https://docs.ironplans.com/concepts/teams/customers). */
    put: operations['customers_v1_update']
    /** Management API for [Customers](https://docs.ironplans.com/concepts/teams/customers). */
    delete: operations['customers_v1_destroy']
    /** Management API for [Customers](https://docs.ironplans.com/concepts/teams/customers). */
    patch: operations['customers_v1_partial_update']
  }
  '/customers/v1/confirm_card/': {
    /** Confirm card as a preferred payment method. */
    post: operations['customers_v1_confirm_card_create']
  }
  '/customers/v1/oidc-exchange/': {
    /** Management API for [Customers](https://docs.ironplans.com/concepts/teams/customers). */
    post: operations['customers_v1_oidc_exchange_create']
  }
  '/customers/v1/payment_intent/': {
    /**
     * Create a payment intent for a new plan. Validates server-side the right
     * amount to charge client-side.  Returns payment intent client secret to
     * give client ability to collect new card details and charge it.
     *
     * There are two cases where we would create payment intent for a new plan
     * up front client-side:
     *
     * 1. Brand new Customer/Team during sign-up flow, no previous subscription
     * or plan
     *
     * 1. Team switching from unmetered free plan to paid plan, with no payment
     * method saved
     */
    post: operations['customers_v1_payment_intent_create']
  }
  '/customers/v1/renew_token/': {
    /** Management API for [Customers](https://docs.ironplans.com/concepts/teams/customers). */
    post: operations['customers_v1_renew_token_create']
  }
  '/customers/v1/setup_intent/': {
    /**
     * Sets up future payments and passes back client secret to be used in
     * card form. Similar to payment_intent endpoint except no charge is made.
     */
    post: operations['customers_v1_setup_intent_create']
  }
  '/customers/v1/token/': {
    /** Create a token for a customer.  The token can be used to perform customer-scoped operations, like subscribing to plans only available to them, creating teams, and sending invites to their team.  If this endpoint is called with `customer_email`, then the customer will be created if it does not exist.  `customer_source_id` can be included to link the Iron Plans Customer to your internally defined user ID. If `plan_id` or `plan_option_id` is specified, or you have configured a default sign-up plan, and the customer does not exist, the customer will automatically be subscribed to the specified plan. */
    post: operations['customers_v1_token_create']
  }
  '/features/v1/': {
    get: operations['features_v1_list']
    post: operations['features_v1_create']
  }
  '/features/v1/{id}/': {
    get: operations['features_v1_retrieve']
    put: operations['features_v1_update']
    delete: operations['features_v1_destroy']
    patch: operations['features_v1_partial_update']
  }
  '/featurespecs/v1/': {
    get: operations['featurespecs_v1_list']
    post: operations['featurespecs_v1_create']
  }
  '/featurespecs/v1/{id}/': {
    get: operations['featurespecs_v1_retrieve']
    put: operations['featurespecs_v1_update']
    delete: operations['featurespecs_v1_destroy']
    patch: operations['featurespecs_v1_partial_update']
  }
  '/invites/v1/': {
    get: operations['invites_v1_list']
    /** Send an invitation via email. */
    post: operations['invites_v1_create']
  }
  '/invites/v1/{id}/': {
    get: operations['invites_v1_retrieve']
    put: operations['invites_v1_update']
    delete: operations['invites_v1_destroy']
    patch: operations['invites_v1_partial_update']
  }
  '/invites/v1/bulk/': {
    /** Send multiple invitations via email. */
    post: operations['invites_v1_bulk_create']
  }
  '/invites/v1/claim/': {
    /** Claim an invite and be redirected to provider's auth url. */
    get: operations['invites_v1_claim_retrieve']
  }
  '/openapi.json': {
    /**
     * OpenApi3 schema for this API. Format can be selected via content negotiation.
     *
     * - YAML: application/vnd.oai.openapi
     * - JSON: application/vnd.oai.openapi+json
     */
    get: operations['openapi.json_retrieve']
  }
  '/openapi.yaml': {
    /**
     * OpenApi3 schema for this API. Format can be selected via content negotiation.
     *
     * - YAML: application/vnd.oai.openapi
     * - JSON: application/vnd.oai.openapi+json
     */
    get: operations['openapi.yaml_retrieve']
  }
  '/payment_methods/v1/': {
    get: operations['payment_methods_v1_list']
    /** Creates a setup intent that will eventually be confirmed client-side to create a payment method */
    post: operations['payment_methods_v1_create']
  }
  '/payment_methods/v1/{id}/': {
    get: operations['payment_methods_v1_retrieve']
    put: operations['payment_methods_v1_update']
    delete: operations['payment_methods_v1_destroy']
    patch: operations['payment_methods_v1_partial_update']
  }
  '/payment_methods/v1/{id}/confirm/': {
    /** Confirm card for a payment method and set as default if none exist. */
    post: operations['payment_methods_v1_confirm_create']
  }
  '/plans/v1/': {
    get: operations['plans_v1_list']
    /** Add a feature and optionally specification to a plan by specifying a `feature_id` and `spec_id` in the list of features. */
    post: operations['plans_v1_create']
  }
  '/plans/v1/{id}/': {
    get: operations['plans_v1_retrieve']
    /** Remove a feature and spec from a plan by specifying `id` and `is_active: false` in the plan feature list in an update operation.  An empty list for PUT or PATCH does nothing.  A PlanFeature cannot change which feature or spec once created. A deactivated PlanFeature can be reactivated by setting `is_active: true`. */
    put: operations['plans_v1_update']
    delete: operations['plans_v1_destroy']
    patch: operations['plans_v1_partial_update']
  }
  '/plans/v1/contact_us/': {
    /** Handle contact us form data for Enterprise style plans. */
    post: operations['plans_v1_contact_us_create']
  }
  '/providers/v1/': {
    get: operations['providers_v1_list']
    post: operations['providers_v1_create']
  }
  '/providers/v1/{id}/': {
    get: operations['providers_v1_retrieve']
    put: operations['providers_v1_update']
    delete: operations['providers_v1_destroy']
    patch: operations['providers_v1_partial_update']
  }
  '/providers/v1/{id}/stripe/': {
    get: operations['providers_v1_stripe_retrieve']
    post: operations['providers_v1_stripe_create']
  }
  '/providers/v1/slug/': {
    get: operations['providers_v1_slug_retrieve']
  }
  '/subscribe_intents/v1/': {
    get: operations['subscribe_intents_v1_list']
    post: operations['subscribe_intents_v1_create']
  }
  '/subscribe_intents/v1/{id}/': {
    get: operations['subscribe_intents_v1_retrieve']
    put: operations['subscribe_intents_v1_update']
    delete: operations['subscribe_intents_v1_destroy']
    patch: operations['subscribe_intents_v1_partial_update']
  }
  '/subscribe_intents/v1/{id}/confirm/': {
    /**
     * Confirm a subscription intent.
     *
     * If the intent is still valid, charge the payment method associated with
     * the intent and create or update a team's subscription.
     */
    post: operations['subscribe_intents_v1_confirm_create']
  }
  '/subscriptions/v1/': {
    get: operations['subscriptions_v1_list']
    post: operations['subscriptions_v1_create']
  }
  '/subscriptions/v1/{id}/': {
    get: operations['subscriptions_v1_retrieve']
    put: operations['subscriptions_v1_update']
    delete: operations['subscriptions_v1_destroy']
    patch: operations['subscriptions_v1_partial_update']
  }
  '/subscriptions/v1/{id}/purge/': {
    /**
     * In future version, this endpoint will not return the subscription that
     * was purged.
     */
    delete: operations['subscriptions_v1_purge_destroy']
  }
  '/subscriptions/v1/{id}/renew/': {
    patch: operations['subscriptions_v1_renew_partial_update']
  }
  '/subscriptions/v1/{id}/report/': {
    post: operations['subscriptions_v1_report_create']
  }
  '/subscriptions/v1/{id}/switch/': {
    patch: operations['subscriptions_v1_switch_partial_update']
  }
  '/subscriptions/v1/{id}/usage/': {
    get: operations['subscriptions_v1_usage_list']
  }
  '/subscriptions/v1/{id}/usage_exceeded/': {
    /** Convenience endpoint so providers don't need to loop through usages. */
    get: operations['subscriptions_v1_usage_exceeded_retrieve']
  }
  '/subscriptions/v1/{subscription_pk}/usages/': {
    get: operations['subscriptions_v1_usages_list']
    post: operations['subscriptions_v1_usages_create']
  }
  '/subscriptions/v1/{subscription_pk}/usages/{id}/': {
    get: operations['subscriptions_v1_usages_retrieve']
    put: operations['subscriptions_v1_usages_update']
    delete: operations['subscriptions_v1_usages_destroy']
    patch: operations['subscriptions_v1_usages_partial_update']
  }
  '/team_memberships/v1/': {
    /**
     * As a Customer, access memberships for all your teams.
     * As a Provider, full admin access to teams.
     */
    get: operations['team_memberships_v1_list']
    /**
     * As a Customer, access memberships for all your teams.
     * As a Provider, full admin access to teams.
     */
    post: operations['team_memberships_v1_create']
  }
  '/team_memberships/v1/{id}/': {
    /**
     * As a Customer, access memberships for all your teams.
     * As a Provider, full admin access to teams.
     */
    get: operations['team_memberships_v1_retrieve']
    /**
     * As a Customer, access memberships for all your teams.
     * As a Provider, full admin access to teams.
     */
    put: operations['team_memberships_v1_update']
    /**
     * As a Customer, access memberships for all your teams.
     * As a Provider, full admin access to teams.
     */
    delete: operations['team_memberships_v1_destroy']
    /**
     * As a Customer, access memberships for all your teams.
     * As a Provider, full admin access to teams.
     */
    patch: operations['team_memberships_v1_partial_update']
  }
  '/teams/v1/': {
    /** Teams can be filtered by metadata using query parameters.  Teams match if they have all of the key value pairs specified. */
    get: operations['teams_v1_list']
    post: operations['teams_v1_create']
  }
  '/teams/v1/{id}/': {
    get: operations['teams_v1_retrieve']
    put: operations['teams_v1_update']
    delete: operations['teams_v1_destroy']
    patch: operations['teams_v1_partial_update']
  }
  '/teams/v1/{id}/metadata/': {
    get: operations['teams_v1_metadata_retrieve']
    post: operations['teams_v1_metadata_create']
    patch: operations['teams_v1_metadata_partial_update']
  }
  '/teams/v1/{team_pk}/invoices/': {
    get: operations['teams_v1_invoices_list']
    post: operations['teams_v1_invoices_create']
  }
  '/teams/v1/{team_pk}/invoices/{id}/': {
    get: operations['teams_v1_invoices_retrieve']
    put: operations['teams_v1_invoices_update']
    delete: operations['teams_v1_invoices_destroy']
    patch: operations['teams_v1_invoices_partial_update']
  }
  '/tokens/v1/': {
    /** Management of Provider Tokens. */
    get: operations['tokens_v1_list']
    /** Management of Provider Tokens. */
    post: operations['tokens_v1_create']
  }
  '/tokens/v1/{id}/': {
    /** Management of Provider Tokens. */
    get: operations['tokens_v1_retrieve']
    /** Management of Provider Tokens. */
    put: operations['tokens_v1_update']
    /** Management of Provider Tokens. */
    delete: operations['tokens_v1_destroy']
    /** Management of Provider Tokens. */
    patch: operations['tokens_v1_partial_update']
  }
}

export interface components {
  schemas: {
    Account: {
      id: string
      email: string
      is_verified: boolean
      token: string
      teams: components['schemas']['Team'][] | null
    }
    AggregationEnum: 'sum' | 'last'
    AuthIssuerEnum: 'none' | 'firebase' | 'cognito' | 'frontegg'
    BillPeriodEnum: 'month' | 'year'
    BillingPeriodEnum: 'hourly' | 'daily' | 'weekly' | 'monthly' | 'annually'
    BulkCreateInviteRequest: {
      sent_to_email?: string
      is_claimed?: boolean
      expires_at?: string
      role?: components['schemas']['RoleEnum']
      team_id: string
      to_emails: string[]
    }
    ButtonField: {
      text: string
      theme_state: string
    }
    ButtonFieldRequest: {
      text: string
      theme_state: string
    }
    /** Base serializer for all actions. */
    CancelAction: {
      button?: components['schemas']['ButtonField']
      subscription_id?: string
    }
    /** Base serializer for all actions. */
    CancelActionRequest: {
      button?: components['schemas']['ButtonFieldRequest']
      subscription_id?: string
    }
    ClientSecret: {
      client_secret: string
    }
    CognitoAuthConfig: {
      id: string
      provider_id: string
      region: string
      user_pool_id: string
      app_client_id: string
    }
    CognitoAuthConfigRequest: {
      provider_id: string
      region: string
      user_pool_id: string
      app_client_id: string
    }
    /** Base serializer for all actions. */
    ContactAction: {
      button?: components['schemas']['ButtonField']
      url: string
    }
    /** Base serializer for all actions. */
    ContactActionRequest: {
      button?: components['schemas']['ButtonFieldRequest']
      url: string
    }
    CreateCustomer: {
      id: string
      identity: components['schemas']['Identity']
      source_id?: string
      teams: components['schemas']['TeamViaMembership'][]
      created_at: string
      updated_at: string
    }
    CreateCustomerRequest: {
      identity: components['schemas']['IdentityRequest']
      source_id?: string
    }
    /**
     * Add a new membership to a Team. Role defaults to `member` if not specified.
     * Specify `email` and/or `source_id` to lookup the customer, create it if it
     * doesn't exist, and add it to the team.
     */
    CreateMembershipRequest: {
      role?: components['schemas']['RoleEnum']
      team_id: string
      customer_id?: string
      email?: string
      source_id?: string
    }
    CreateSubscribeIntentRequest: {
      team_id: string
      plan_option_id: string
      payment_method_id?: string
    }
    CreateUsageRequest: {
      idempotency_key?: string | null
      slug: string
      op: components['schemas']['OpEnum']
      value?: number
      occurred_at?: string
    }
    Customer: {
      id: string
      email: string
      source_id?: string
      created_at: string
      updated_at: string
      has_saved_payment_method: boolean
    }
    CustomerConfirmCardRequest: {
      stripe_setup_id: string
      payment_method_id: string
    }
    CustomerIntentRequest: {
      plan_id: string
      team_id: string
    }
    CustomerRequest: {
      source_id?: string
    }
    CustomerTokenResponse: {
      token: string
      is_new: boolean
    }
    Error: {
      detail: components['schemas']['InnerError']
      message: string
    }
    Feature: {
      id: string
      provider_id?: string
      slug?: string | null
      display?: string | null
      tooltip?: string | null
      is_builtin: boolean
    }
    FeatureRequest: {
      provider_id?: string
      slug?: string | null
      display?: string | null
      tooltip?: string | null
    }
    FeatureSpec: {
      id: string
      name: string
      record_period?: components['schemas']['RecordPeriodEnum']
      aggregation?: components['schemas']['AggregationEnum']
      max_limit?: number
      /** Amount in cents */
      unit_price?: number | null
      units_included?: number | null
      provider_id?: string
    }
    FeatureSpecRequest: {
      name: string
      record_period?: components['schemas']['RecordPeriodEnum']
      aggregation?: components['schemas']['AggregationEnum']
      max_limit?: number
      /** Amount in cents */
      unit_price?: number | null
      units_included?: number | null
      provider_id?: string
    }
    FronteggAuthConfig: {
      id: string
      provider_id: string
      public_key: string
    }
    FronteggAuthConfigRequest: {
      provider_id: string
      public_key: string
    }
    IDTokenExchangeRequest: {
      id_token: string
    }
    Identity: {
      email: string
    }
    IdentityRequest: {
      email: string
    }
    InnerError: {
      non_field_errors: { [key: string]: any }[]
      field_errors: { [key: string]: any }[]
    }
    Invite: {
      id: string
      sent_by: components['schemas']['PublicProfile']
      sent_to_email: string
      is_claimed?: boolean
      expires_at?: string
      created_at: string
      role?: components['schemas']['RoleEnum']
      team_id: string
    }
    InviteRequest: {
      sent_to_email: string
      is_claimed?: boolean
      expires_at?: string
      role?: components['schemas']['RoleEnum']
      team_id: string
    }
    Invoice: {
      id: string
      billing_period?: components['schemas']['BillingPeriodEnum']
      created_at: string
      updated_at: string
      team_id: string
      plan_name?: string
      subscription_id: string | null
      state: components['schemas']['StateEnum']
      stripe_payment_id?: string | null
      total: number
    }
    InvoiceRequest: {
      billing_period?: components['schemas']['BillingPeriodEnum']
      plan_name?: string
      state: components['schemas']['StateEnum']
      stripe_payment_id?: string | null
    }
    IssueCustomerTokenRequest: {
      customer_id?: string
      customer_email?: string
      customer_source_id?: string
    }
    Membership: {
      id: string
      team_id: string
      customer_id: string
      role: components['schemas']['RoleEnum']
      email: string
    }
    MembershipRequest: {
      role: components['schemas']['RoleEnum']
    }
    /** String to string mapping.  Keys may be up to 128 bytes and values may be up to 512 bytes. */
    Metadata: { [key: string]: string }
    /** String to string mapping.  Keys may be up to 128 bytes and values may be up to 512 bytes. */
    MetadataRequest: { [key: string]: string }
    OnSubscriptionEndEnum: 'expire' | 'renew'
    OpEnum: 'inc' | 'dec' | 'set' | 'reset'
    PaginatedCognitoAuthConfigList: {
      count?: number
      next?: string | null
      previous?: string | null
      results?: components['schemas']['CognitoAuthConfig'][]
    }
    PaginatedCustomerList: {
      count?: number
      next?: string | null
      previous?: string | null
      results?: components['schemas']['Customer'][]
    }
    PaginatedFeatureList: {
      count?: number
      next?: string | null
      previous?: string | null
      results?: components['schemas']['Feature'][]
    }
    PaginatedFeatureSpecList: {
      count?: number
      next?: string | null
      previous?: string | null
      results?: components['schemas']['FeatureSpec'][]
    }
    PaginatedFronteggAuthConfigList: {
      count?: number
      next?: string | null
      previous?: string | null
      results?: components['schemas']['FronteggAuthConfig'][]
    }
    PaginatedInviteList: {
      count?: number
      next?: string | null
      previous?: string | null
      results?: components['schemas']['Invite'][]
    }
    PaginatedInvoiceList: {
      count?: number
      next?: string | null
      previous?: string | null
      results?: components['schemas']['Invoice'][]
    }
    PaginatedMembershipList: {
      count?: number
      next?: string | null
      previous?: string | null
      results?: components['schemas']['Membership'][]
    }
    PaginatedPlanList: {
      count?: number
      next?: string | null
      previous?: string | null
      results?: components['schemas']['Plan'][]
    }
    PaginatedProviderList: {
      count?: number
      next?: string | null
      previous?: string | null
      results?: components['schemas']['Provider'][]
    }
    PaginatedStripeCardPaymentMethodList: {
      count?: number
      next?: string | null
      previous?: string | null
      results?: components['schemas']['StripeCardPaymentMethod'][]
    }
    PaginatedSubscribeIntentList: {
      count?: number
      next?: string | null
      previous?: string | null
      results?: components['schemas']['SubscribeIntent'][]
    }
    PaginatedSubscriptionList: {
      count?: number
      next?: string | null
      previous?: string | null
      results?: components['schemas']['Subscription'][]
    }
    PaginatedTeamList: {
      count?: number
      next?: string | null
      previous?: string | null
      results?: components['schemas']['Team'][]
    }
    PaginatedTokenList: {
      count?: number
      next?: string | null
      previous?: string | null
      results?: components['schemas']['Token'][]
    }
    PaginatedUsageRecordList: {
      count?: number
      next?: string | null
      previous?: string | null
      results?: components['schemas']['UsageRecord'][]
    }
    PatchedCognitoAuthConfigRequest: {
      provider_id?: string
      region?: string
      user_pool_id?: string
      app_client_id?: string
    }
    PatchedCustomerRequest: {
      source_id?: string
    }
    PatchedFeatureRequest: {
      provider_id?: string
      slug?: string | null
      display?: string | null
      tooltip?: string | null
    }
    PatchedFeatureSpecRequest: {
      name?: string
      record_period?: components['schemas']['RecordPeriodEnum']
      aggregation?: components['schemas']['AggregationEnum']
      max_limit?: number
      /** Amount in cents */
      unit_price?: number | null
      units_included?: number | null
      provider_id?: string
    }
    PatchedFronteggAuthConfigRequest: {
      provider_id?: string
      public_key?: string
    }
    PatchedInviteRequest: {
      sent_to_email?: string
      is_claimed?: boolean
      expires_at?: string
      role?: components['schemas']['RoleEnum']
      team_id?: string
    }
    PatchedInvoiceRequest: {
      billing_period?: components['schemas']['BillingPeriodEnum']
      plan_name?: string
      state?: components['schemas']['StateEnum']
      stripe_payment_id?: string | null
    }
    PatchedMembershipRequest: {
      role?: components['schemas']['RoleEnum']
    }
    /** String to string mapping.  Keys may be up to 128 bytes and values may be up to 512 bytes. */
    PatchedMetadataRequest: { [key: string]: string }
    PatchedPlanRequest: {
      /** DEPRECATED */
      provider_id?: string
      name?: string
      tier?: number
      is_active?: boolean
      is_public?: boolean
      is_trial_allowed?: boolean
      is_self_serve?: boolean
      redirect_url?: string | null
      cta_text?: string | null
      public_cta_text?: string | null
      replace_plan_id?: string | null
      /** Amount in cents */
      per_year_price_cents?: number | null
      /** Amount in cents */
      per_month_price_cents?: number | null
      features?: components['schemas']['PlanFeatureRequest'][]
      teams_access?: components['schemas']['TeamAccessRequest'][]
      is_payment_upfront?: boolean
    }
    PatchedPlanSwitchRequest: {
      plan_id?: string
      payment_state?: components['schemas']['PaymentStateEnum']
    }
    PatchedProviderRequest: {
      name?: string
      slug?: string
      auth_url?: string | null
      home_url?: string | null
      webhook_url?: string | null
      invoice_logo_url?: string | null
      default_plan_id?: string | null
      trial_days?: number
      is_card_required?: boolean
      support_email?: string | null
      auth_issuer?: components['schemas']['AuthIssuerEnum']
    }
    PatchedSubscribeIntentRequest: {
      id?: string
      plan_option_id?: string
      invoice?: components['schemas']['SIInvoiceRequest']
      credit_cents?: number
      on_subscription_end?: components['schemas']['OnSubscriptionEndEnum']
      next_upfront_bill_in_days?: number
      next_meter_bill_in_days?: number
      trial_end_in_days?: number
    }
    PatchedSubscriptionRequest: {
      plan_id?: string
      team_id?: string
      free_trial_end_at?: string | null
      is_paused?: boolean
      next_plan_id?: string
      cancel_on?: string | null
    }
    PatchedTeamDetailRequest: {
      name?: string
      is_free_trial_used?: boolean
    }
    PatchedTokenRequest: {
      provider_id?: string
      is_active?: boolean
      is_public?: boolean
    }
    PatchedUpdatePaymentMethodRequest: {
      is_default?: boolean | null
    }
    PaymentStateEnum: 'complete' | 'incomplete'
    Plan: {
      id: string
      /** DEPRECATED */
      provider_id?: string
      name: string
      tier?: number
      is_active: boolean
      is_public: boolean
      is_trial_allowed: boolean
      is_trial_possible: boolean | null
      is_default: boolean
      is_self_serve?: boolean
      redirect_url?: string | null
      cta_text?: string | null
      public_cta_text?: string | null
      replace_plan_id?: string | null
      /** Amount in cents */
      per_year_price_cents?: number | null
      /** Amount in cents */
      per_month_price_cents?: number | null
      features: components['schemas']['PlanFeature'][]
      teams_access: components['schemas']['TeamAccess'][]
      options: components['schemas']['PlanOption'][] | null
      state: components['schemas']['PlanState'] | null
      is_payment_upfront?: boolean
    }
    /** Serializer for plan actions.  Requires customer context. */
    PlanActions: {
      subscribe: components['schemas']['SubscribeAction']
      contact: components['schemas']['ContactAction']
      cancel: components['schemas']['CancelAction']
      undo_cancel: components['schemas']['UndoCancelAction']
    }
    /** Serializer for plan actions.  Requires customer context. */
    PlanActionsRequest: {
      subscribe: components['schemas']['SubscribeActionRequest']
      contact: components['schemas']['ContactActionRequest']
      cancel: components['schemas']['CancelActionRequest']
      undo_cancel: components['schemas']['UndoCancelActionRequest']
    }
    PlanContactFormRequest: {
      email?: string
      company_name?: string
    }
    PlanFeature: {
      id?: string
      is_active?: boolean
      display?: string | null
      sort?: number
      feature: components['schemas']['Feature']
      spec: components['schemas']['FeatureSpec']
    }
    PlanFeatureRequest: {
      id?: string
      feature_id?: string
      spec_id?: string | null
      is_active?: boolean
      display?: string | null
      sort?: number
    }
    PlanOption: {
      id: string
      plan_id: string
      bill_period: components['schemas']['BillPeriodEnum']
      price_cents: number
      is_payment_upfront?: boolean
    }
    PlanOptionRequest: {
      id: string
      plan_id: string
      bill_period: components['schemas']['BillPeriodEnum']
      price_cents: number
      is_payment_upfront?: boolean
    }
    PlanRequest: {
      /** DEPRECATED */
      provider_id?: string
      name: string
      tier?: number
      is_active: boolean
      is_public: boolean
      is_trial_allowed: boolean
      is_self_serve?: boolean
      redirect_url?: string | null
      cta_text?: string | null
      public_cta_text?: string | null
      replace_plan_id?: string | null
      /** Amount in cents */
      per_year_price_cents?: number | null
      /** Amount in cents */
      per_month_price_cents?: number | null
      features: components['schemas']['PlanFeatureRequest'][]
      teams_access: components['schemas']['TeamAccessRequest'][]
      is_payment_upfront?: boolean
    }
    /**
     * State of a plan, including possible actions and other caller context.
     * Currently, only available to authenticated customers, support for public
     * plans is...planned >_>
     */
    PlanState: {
      actions: components['schemas']['PlanActions']
      trial_days: number
    }
    /**
     * State of a plan, including possible actions and other caller context.
     * Currently, only available to authenticated customers, support for public
     * plans is...planned >_>
     */
    PlanStateRequest: {
      actions: components['schemas']['PlanActionsRequest']
    }
    Provider: {
      id: string
      name: string
      slug: string
      auth_url?: string | null
      home_url?: string | null
      webhook_url?: string | null
      invoice_logo_url?: string | null
      default_plan: components['schemas']['Plan'] | null
      default_plan_id?: string | null
      trial_days?: number
      is_card_required?: boolean
      owner_id: string
      stripe_account_id: string
      shadow_id: string | null
      parent_id: string | null
      is_shadow: boolean
      support_email?: string | null
      auth_issuer?: components['schemas']['AuthIssuerEnum']
      cognito_auth_config: components['schemas']['CognitoAuthConfig'] | null
      frontegg_auth_config: components['schemas']['FronteggAuthConfig'] | null
    }
    ProviderRequest: {
      name: string
      slug: string
      auth_url?: string | null
      home_url?: string | null
      webhook_url?: string | null
      invoice_logo_url?: string | null
      default_plan_id?: string | null
      trial_days?: number
      is_card_required?: boolean
      support_email?: string | null
      auth_issuer?: components['schemas']['AuthIssuerEnum']
    }
    PublicProfile: {
      id: string
      email: string
    }
    RecordPeriodEnum: 'hourly' | 'daily' | 'weekly' | 'monthly' | 'annually'
    ReportUsageRequest: {
      slug: string
      op: components['schemas']['OpEnum']
      value?: number
    }
    RequirementsEnum: 'payment_method_saved'
    RequirementsMetEnum: 'payment_method_saved'
    RoleEnum: 'owner' | 'member'
    SIInvoice: {
      id: string
      state: components['schemas']['StateEnum']
      cents: number
      line_items: components['schemas']['SILineItem'][]
      due_at: string
    }
    SIInvoiceRequest: {
      id: string
      state: components['schemas']['StateEnum']
      cents: number
      line_items: components['schemas']['SILineItemRequest'][]
      due_at: string
    }
    SILineItem: {
      title: string
      detail: string
      cents: number
    }
    SILineItemRequest: {
      title: string
      detail: string
      cents: number
    }
    SetupIntentConfirmRequest: {
      stripe_setup_id: string
      is_default?: boolean | null
    }
    Slug: {
      slug: string
    }
    StateEnum: 'draft' | 'open' | 'paid' | 'canceled' | 'void'
    StripeCard: {
      brand: string
      last4: string
      exp_month: number
      exp_year: number
    }
    StripeCardPaymentMethod: {
      id: string
      created: number
      is_default: boolean | null
      card: components['schemas']['StripeCard']
    }
    /** Base serializer for all actions. */
    SubscribeAction: {
      button?: components['schemas']['ButtonField']
      requirements: components['schemas']['RequirementsEnum'][]
      requirements_met: components['schemas']['RequirementsMetEnum'][]
    }
    /** Base serializer for all actions. */
    SubscribeActionRequest: {
      button?: components['schemas']['ButtonFieldRequest']
      requirements: components['schemas']['RequirementsEnum'][]
      requirements_met: components['schemas']['RequirementsMetEnum'][]
    }
    SubscribeIntent: {
      id: string
      plan_option_id: string
      invoice: components['schemas']['SIInvoice']
      credit_cents: number
      on_subscription_end: components['schemas']['OnSubscriptionEndEnum']
      next_upfront_bill_in_days: number
      next_meter_bill_in_days: number
      trial_end_in_days: number
    }
    SubscribeIntentRequest: {
      id: string
      plan_option_id: string
      invoice: components['schemas']['SIInvoiceRequest']
      credit_cents: number
      on_subscription_end: components['schemas']['OnSubscriptionEndEnum']
      next_upfront_bill_in_days: number
      next_meter_bill_in_days: number
      trial_end_in_days: number
    }
    Subscription: {
      id: string
      plan_id: string
      team_id: string
      start_at: string
      end_at: string | null
      free_trial_end_at?: string | null
      is_paused?: boolean
      is_active: boolean
      next_plan_id?: string
      cancel_on?: string | null
    }
    SubscriptionDetail: {
      id: string
      plan: components['schemas']['Plan']
      plan_id: string
      start_at: string
      end_at: string | null
      free_trial_end_at: string | null
      is_paused: boolean
      cancel_on: string | null
      is_active: boolean
      days_left: number
      billing_period: string
      next_plan_id: string
      next_plan: components['schemas']['Plan']
      is_free_trial_eligible: boolean
      usages: components['schemas']['Usage'][]
    }
    SubscriptionRequest: {
      plan_id: string
      team_id: string
      free_trial_end_at?: string | null
      is_paused?: boolean
      next_plan_id?: string
      cancel_on?: string | null
    }
    Team: {
      id: string
      name?: string | null
      created_at: string
      updated_at: string
      metadata: components['schemas']['Metadata']
      subscription_id: string | null
    }
    TeamAccess: {
      id?: string
      team_id: string
      name?: string
    }
    TeamAccessRequest: {
      id?: string
      team_id: string
      name?: string
      revoke?: boolean
    }
    TeamDetail: {
      id: string
      created_at: string
      updated_at: string
      name: string
      is_free_trial_used?: boolean
      members: components['schemas']['Membership'][]
      invites: components['schemas']['Invite'][]
      subscription: components['schemas']['SubscriptionDetail'] | null
      available_plans: components['schemas']['Plan'][]
      metadata: components['schemas']['Metadata'] | null
      total_credits: number
      provider_id: string
    }
    TeamDetailRequest: {
      name: string
      is_free_trial_used?: boolean
    }
    TeamViaMembership: {
      id: string
      name: string
    }
    Token: {
      id: string
      provider_id?: string
      token: string
      is_active?: boolean
      is_public?: boolean
      last_used_at: string | null
      created_at: string
    }
    TokenRequest: {
      provider_id?: string
      is_active?: boolean
      is_public?: boolean
    }
    /** Base serializer for all actions. */
    UndoCancelAction: {
      button?: components['schemas']['ButtonField']
      subscription_id?: string
    }
    /** Base serializer for all actions. */
    UndoCancelActionRequest: {
      button?: components['schemas']['ButtonFieldRequest']
      subscription_id?: string
    }
    UpdatePaymentMethodRequest: {
      is_default?: boolean | null
    }
    Usage: {
      slug: string
      value: number
      limit: number
      per_unit: number
    }
    UsageRecord: {
      id: string
      slug: string
      op: components['schemas']['OpEnum']
      value?: number
      occurred_at?: string
      idempotency_key?: string
    }
  }
}

export interface operations {
  /**
   * Shortcut to `/accounts/v1/{{my customer id}}`.
   *
   * Automatically creates a new customer account if one does not
   * exist for the authenticated user.
   */
  accounts_v1_me_retrieve: {
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Account']
        }
      }
    }
  }
  auth_configs_cognito_v1_list: {
    parameters: {
      query: {
        /** Number of results to return per page. */
        limit?: number
        /** The initial index from which to return the results. */
        offset?: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PaginatedCognitoAuthConfigList']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  auth_configs_cognito_v1_create: {
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['CognitoAuthConfig']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CognitoAuthConfigRequest']
        'application/x-www-form-urlencoded': components['schemas']['CognitoAuthConfigRequest']
        'multipart/form-data': components['schemas']['CognitoAuthConfigRequest']
      }
    }
  }
  auth_configs_cognito_v1_retrieve: {
    parameters: {
      path: {
        /** A UUID string identifying this cognito auth config. */
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['CognitoAuthConfig']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  auth_configs_cognito_v1_update: {
    parameters: {
      path: {
        /** A UUID string identifying this cognito auth config. */
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['CognitoAuthConfig']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CognitoAuthConfigRequest']
        'application/x-www-form-urlencoded': components['schemas']['CognitoAuthConfigRequest']
        'multipart/form-data': components['schemas']['CognitoAuthConfigRequest']
      }
    }
  }
  auth_configs_cognito_v1_destroy: {
    parameters: {
      path: {
        /** A UUID string identifying this cognito auth config. */
        id: string
      }
    }
    responses: {
      /** No response body */
      204: never
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  auth_configs_cognito_v1_partial_update: {
    parameters: {
      path: {
        /** A UUID string identifying this cognito auth config. */
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['CognitoAuthConfig']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchedCognitoAuthConfigRequest']
        'application/x-www-form-urlencoded': components['schemas']['PatchedCognitoAuthConfigRequest']
        'multipart/form-data': components['schemas']['PatchedCognitoAuthConfigRequest']
      }
    }
  }
  auth_configs_frontegg_v1_list: {
    parameters: {
      query: {
        /** Number of results to return per page. */
        limit?: number
        /** The initial index from which to return the results. */
        offset?: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PaginatedFronteggAuthConfigList']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  auth_configs_frontegg_v1_create: {
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['FronteggAuthConfig']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['FronteggAuthConfigRequest']
        'application/x-www-form-urlencoded': components['schemas']['FronteggAuthConfigRequest']
        'multipart/form-data': components['schemas']['FronteggAuthConfigRequest']
      }
    }
  }
  auth_configs_frontegg_v1_retrieve: {
    parameters: {
      path: {
        /** A UUID string identifying this frontegg auth config. */
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['FronteggAuthConfig']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  auth_configs_frontegg_v1_update: {
    parameters: {
      path: {
        /** A UUID string identifying this frontegg auth config. */
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['FronteggAuthConfig']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['FronteggAuthConfigRequest']
        'application/x-www-form-urlencoded': components['schemas']['FronteggAuthConfigRequest']
        'multipart/form-data': components['schemas']['FronteggAuthConfigRequest']
      }
    }
  }
  auth_configs_frontegg_v1_destroy: {
    parameters: {
      path: {
        /** A UUID string identifying this frontegg auth config. */
        id: string
      }
    }
    responses: {
      /** No response body */
      204: never
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  auth_configs_frontegg_v1_partial_update: {
    parameters: {
      path: {
        /** A UUID string identifying this frontegg auth config. */
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['FronteggAuthConfig']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchedFronteggAuthConfigRequest']
        'application/x-www-form-urlencoded': components['schemas']['PatchedFronteggAuthConfigRequest']
        'multipart/form-data': components['schemas']['PatchedFronteggAuthConfigRequest']
      }
    }
  }
  /** Management API for [Customers](https://docs.ironplans.com/concepts/teams/customers). */
  customers_v1_list: {
    parameters: {
      query: {
        email?: string
        /** Number of results to return per page. */
        limit?: number
        /** The initial index from which to return the results. */
        offset?: number
        source_id?: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PaginatedCustomerList']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  /** Management API for [Customers](https://docs.ironplans.com/concepts/teams/customers). */
  customers_v1_create: {
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['CreateCustomer']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateCustomerRequest']
        'application/x-www-form-urlencoded': components['schemas']['CreateCustomerRequest']
        'multipart/form-data': components['schemas']['CreateCustomerRequest']
      }
    }
  }
  /** Management API for [Customers](https://docs.ironplans.com/concepts/teams/customers). */
  customers_v1_retrieve: {
    parameters: {
      path: {
        /** A UUID string identifying this customer. */
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Customer']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  /** Management API for [Customers](https://docs.ironplans.com/concepts/teams/customers). */
  customers_v1_update: {
    parameters: {
      path: {
        /** A UUID string identifying this customer. */
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Customer']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CustomerRequest']
        'application/x-www-form-urlencoded': components['schemas']['CustomerRequest']
        'multipart/form-data': components['schemas']['CustomerRequest']
      }
    }
  }
  /** Management API for [Customers](https://docs.ironplans.com/concepts/teams/customers). */
  customers_v1_destroy: {
    parameters: {
      path: {
        /** A UUID string identifying this customer. */
        id: string
      }
    }
    responses: {
      /** No response body */
      204: never
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  /** Management API for [Customers](https://docs.ironplans.com/concepts/teams/customers). */
  customers_v1_partial_update: {
    parameters: {
      path: {
        /** A UUID string identifying this customer. */
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Customer']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchedCustomerRequest']
        'application/x-www-form-urlencoded': components['schemas']['PatchedCustomerRequest']
        'multipart/form-data': components['schemas']['PatchedCustomerRequest']
      }
    }
  }
  /** Confirm card as a preferred payment method. */
  customers_v1_confirm_card_create: {
    responses: {
      /** No response body */
      200: unknown
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CustomerConfirmCardRequest']
        'application/x-www-form-urlencoded': components['schemas']['CustomerConfirmCardRequest']
        'multipart/form-data': components['schemas']['CustomerConfirmCardRequest']
      }
    }
  }
  /** Management API for [Customers](https://docs.ironplans.com/concepts/teams/customers). */
  customers_v1_oidc_exchange_create: {
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['CustomerTokenResponse']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['IDTokenExchangeRequest']
        'application/x-www-form-urlencoded': components['schemas']['IDTokenExchangeRequest']
        'multipart/form-data': components['schemas']['IDTokenExchangeRequest']
      }
    }
  }
  /**
   * Create a payment intent for a new plan. Validates server-side the right
   * amount to charge client-side.  Returns payment intent client secret to
   * give client ability to collect new card details and charge it.
   *
   * There are two cases where we would create payment intent for a new plan
   * up front client-side:
   *
   * 1. Brand new Customer/Team during sign-up flow, no previous subscription
   * or plan
   *
   * 1. Team switching from unmetered free plan to paid plan, with no payment
   * method saved
   */
  customers_v1_payment_intent_create: {
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['ClientSecret']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CustomerIntentRequest']
        'application/x-www-form-urlencoded': components['schemas']['CustomerIntentRequest']
        'multipart/form-data': components['schemas']['CustomerIntentRequest']
      }
    }
  }
  /** Management API for [Customers](https://docs.ironplans.com/concepts/teams/customers). */
  customers_v1_renew_token_create: {
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['CustomerTokenResponse']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  /**
   * Sets up future payments and passes back client secret to be used in
   * card form. Similar to payment_intent endpoint except no charge is made.
   */
  customers_v1_setup_intent_create: {
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['ClientSecret']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CustomerIntentRequest']
        'application/x-www-form-urlencoded': components['schemas']['CustomerIntentRequest']
        'multipart/form-data': components['schemas']['CustomerIntentRequest']
      }
    }
  }
  /** Create a token for a customer.  The token can be used to perform customer-scoped operations, like subscribing to plans only available to them, creating teams, and sending invites to their team.  If this endpoint is called with `customer_email`, then the customer will be created if it does not exist.  `customer_source_id` can be included to link the Iron Plans Customer to your internally defined user ID. If `plan_id` or `plan_option_id` is specified, or you have configured a default sign-up plan, and the customer does not exist, the customer will automatically be subscribed to the specified plan. */
  customers_v1_token_create: {
    parameters: {
      query: {
        /** The plan ID the customer should be subscribed to if the customer does not already exist.   Will always subscribe to the **monthly** plan option.   Specify `plan_option_id` to subscribe to a specific plan option, e.g. yearly.   If the customer already exists, this parameter is ignored. */
        plan_id?: string
        /** The plan option ID the customer should be subscribed to if the customer does not already exist.  If the customer already exists, this parameter is ignored. */
        plan_option_id?: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['CustomerTokenResponse']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['IssueCustomerTokenRequest']
        'application/x-www-form-urlencoded': components['schemas']['IssueCustomerTokenRequest']
        'multipart/form-data': components['schemas']['IssueCustomerTokenRequest']
      }
    }
  }
  features_v1_list: {
    parameters: {
      query: {
        /** Number of results to return per page. */
        limit?: number
        /** The initial index from which to return the results. */
        offset?: number
        slug?: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PaginatedFeatureList']
        }
      }
    }
  }
  features_v1_create: {
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['Feature']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['FeatureRequest']
        'application/x-www-form-urlencoded': components['schemas']['FeatureRequest']
        'multipart/form-data': components['schemas']['FeatureRequest']
      }
    }
  }
  features_v1_retrieve: {
    parameters: {
      path: {
        /** A UUID string identifying this feature. */
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Feature']
        }
      }
    }
  }
  features_v1_update: {
    parameters: {
      path: {
        /** A UUID string identifying this feature. */
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Feature']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['FeatureRequest']
        'application/x-www-form-urlencoded': components['schemas']['FeatureRequest']
        'multipart/form-data': components['schemas']['FeatureRequest']
      }
    }
  }
  features_v1_destroy: {
    parameters: {
      path: {
        /** A UUID string identifying this feature. */
        id: string
      }
    }
    responses: {
      /** No response body */
      204: never
    }
  }
  features_v1_partial_update: {
    parameters: {
      path: {
        /** A UUID string identifying this feature. */
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Feature']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchedFeatureRequest']
        'application/x-www-form-urlencoded': components['schemas']['PatchedFeatureRequest']
        'multipart/form-data': components['schemas']['PatchedFeatureRequest']
      }
    }
  }
  featurespecs_v1_list: {
    parameters: {
      query: {
        /** Number of results to return per page. */
        limit?: number
        /** The initial index from which to return the results. */
        offset?: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PaginatedFeatureSpecList']
        }
      }
    }
  }
  featurespecs_v1_create: {
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['FeatureSpec']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['FeatureSpecRequest']
        'application/x-www-form-urlencoded': components['schemas']['FeatureSpecRequest']
        'multipart/form-data': components['schemas']['FeatureSpecRequest']
      }
    }
  }
  featurespecs_v1_retrieve: {
    parameters: {
      path: {
        /** A UUID string identifying this feature spec. */
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['FeatureSpec']
        }
      }
    }
  }
  featurespecs_v1_update: {
    parameters: {
      path: {
        /** A UUID string identifying this feature spec. */
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['FeatureSpec']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['FeatureSpecRequest']
        'application/x-www-form-urlencoded': components['schemas']['FeatureSpecRequest']
        'multipart/form-data': components['schemas']['FeatureSpecRequest']
      }
    }
  }
  featurespecs_v1_destroy: {
    parameters: {
      path: {
        /** A UUID string identifying this feature spec. */
        id: string
      }
    }
    responses: {
      /** No response body */
      204: never
    }
  }
  featurespecs_v1_partial_update: {
    parameters: {
      path: {
        /** A UUID string identifying this feature spec. */
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['FeatureSpec']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchedFeatureSpecRequest']
        'application/x-www-form-urlencoded': components['schemas']['PatchedFeatureSpecRequest']
        'multipart/form-data': components['schemas']['PatchedFeatureSpecRequest']
      }
    }
  }
  invites_v1_list: {
    parameters: {
      query: {
        /** Number of results to return per page. */
        limit?: number
        /** The initial index from which to return the results. */
        offset?: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PaginatedInviteList']
        }
      }
    }
  }
  /** Send an invitation via email. */
  invites_v1_create: {
    responses: {
      /** No response body */
      201: unknown
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['InviteRequest']
        'application/x-www-form-urlencoded': components['schemas']['InviteRequest']
        'multipart/form-data': components['schemas']['InviteRequest']
      }
    }
  }
  invites_v1_retrieve: {
    parameters: {
      path: {
        /** A UUID string identifying this invite. */
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Invite']
        }
      }
    }
  }
  invites_v1_update: {
    parameters: {
      path: {
        /** A UUID string identifying this invite. */
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Invite']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['InviteRequest']
        'application/x-www-form-urlencoded': components['schemas']['InviteRequest']
        'multipart/form-data': components['schemas']['InviteRequest']
      }
    }
  }
  invites_v1_destroy: {
    parameters: {
      path: {
        /** A UUID string identifying this invite. */
        id: string
      }
    }
    responses: {
      /** No response body */
      204: never
    }
  }
  invites_v1_partial_update: {
    parameters: {
      path: {
        /** A UUID string identifying this invite. */
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Invite']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchedInviteRequest']
        'application/x-www-form-urlencoded': components['schemas']['PatchedInviteRequest']
        'multipart/form-data': components['schemas']['PatchedInviteRequest']
      }
    }
  }
  /** Send multiple invitations via email. */
  invites_v1_bulk_create: {
    responses: {
      /** No response body */
      201: unknown
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['BulkCreateInviteRequest']
        'application/x-www-form-urlencoded': components['schemas']['BulkCreateInviteRequest']
        'multipart/form-data': components['schemas']['BulkCreateInviteRequest']
      }
    }
  }
  /** Claim an invite and be redirected to provider's auth url. */
  invites_v1_claim_retrieve: {
    parameters: {
      query: {
        token: string
      }
    }
    responses: {
      /** No response body */
      302: never
    }
  }
  /**
   * OpenApi3 schema for this API. Format can be selected via content negotiation.
   *
   * - YAML: application/vnd.oai.openapi
   * - JSON: application/vnd.oai.openapi+json
   */
  'openapi.json_retrieve': {
    parameters: {
      query: {
        lang?:
          | 'af'
          | 'ar'
          | 'ar-dz'
          | 'ast'
          | 'az'
          | 'be'
          | 'bg'
          | 'bn'
          | 'br'
          | 'bs'
          | 'ca'
          | 'cs'
          | 'cy'
          | 'da'
          | 'de'
          | 'dsb'
          | 'el'
          | 'en'
          | 'en-au'
          | 'en-gb'
          | 'eo'
          | 'es'
          | 'es-ar'
          | 'es-co'
          | 'es-mx'
          | 'es-ni'
          | 'es-ve'
          | 'et'
          | 'eu'
          | 'fa'
          | 'fi'
          | 'fr'
          | 'fy'
          | 'ga'
          | 'gd'
          | 'gl'
          | 'he'
          | 'hi'
          | 'hr'
          | 'hsb'
          | 'hu'
          | 'hy'
          | 'ia'
          | 'id'
          | 'ig'
          | 'io'
          | 'is'
          | 'it'
          | 'ja'
          | 'ka'
          | 'kab'
          | 'kk'
          | 'km'
          | 'kn'
          | 'ko'
          | 'ky'
          | 'lb'
          | 'lt'
          | 'lv'
          | 'mk'
          | 'ml'
          | 'mn'
          | 'mr'
          | 'my'
          | 'nb'
          | 'ne'
          | 'nl'
          | 'nn'
          | 'os'
          | 'pa'
          | 'pl'
          | 'pt'
          | 'pt-br'
          | 'ro'
          | 'ru'
          | 'sk'
          | 'sl'
          | 'sq'
          | 'sr'
          | 'sr-latn'
          | 'sv'
          | 'sw'
          | 'ta'
          | 'te'
          | 'tg'
          | 'th'
          | 'tk'
          | 'tr'
          | 'tt'
          | 'udm'
          | 'uk'
          | 'ur'
          | 'uz'
          | 'vi'
          | 'zh-hans'
          | 'zh-hant'
      }
    }
    responses: {
      200: {
        content: {
          'application/vnd.oai.openapi+json': { [key: string]: any }
          'application/json': { [key: string]: any }
        }
      }
    }
  }
  /**
   * OpenApi3 schema for this API. Format can be selected via content negotiation.
   *
   * - YAML: application/vnd.oai.openapi
   * - JSON: application/vnd.oai.openapi+json
   */
  'openapi.yaml_retrieve': {
    parameters: {
      query: {
        lang?:
          | 'af'
          | 'ar'
          | 'ar-dz'
          | 'ast'
          | 'az'
          | 'be'
          | 'bg'
          | 'bn'
          | 'br'
          | 'bs'
          | 'ca'
          | 'cs'
          | 'cy'
          | 'da'
          | 'de'
          | 'dsb'
          | 'el'
          | 'en'
          | 'en-au'
          | 'en-gb'
          | 'eo'
          | 'es'
          | 'es-ar'
          | 'es-co'
          | 'es-mx'
          | 'es-ni'
          | 'es-ve'
          | 'et'
          | 'eu'
          | 'fa'
          | 'fi'
          | 'fr'
          | 'fy'
          | 'ga'
          | 'gd'
          | 'gl'
          | 'he'
          | 'hi'
          | 'hr'
          | 'hsb'
          | 'hu'
          | 'hy'
          | 'ia'
          | 'id'
          | 'ig'
          | 'io'
          | 'is'
          | 'it'
          | 'ja'
          | 'ka'
          | 'kab'
          | 'kk'
          | 'km'
          | 'kn'
          | 'ko'
          | 'ky'
          | 'lb'
          | 'lt'
          | 'lv'
          | 'mk'
          | 'ml'
          | 'mn'
          | 'mr'
          | 'my'
          | 'nb'
          | 'ne'
          | 'nl'
          | 'nn'
          | 'os'
          | 'pa'
          | 'pl'
          | 'pt'
          | 'pt-br'
          | 'ro'
          | 'ru'
          | 'sk'
          | 'sl'
          | 'sq'
          | 'sr'
          | 'sr-latn'
          | 'sv'
          | 'sw'
          | 'ta'
          | 'te'
          | 'tg'
          | 'th'
          | 'tk'
          | 'tr'
          | 'tt'
          | 'udm'
          | 'uk'
          | 'ur'
          | 'uz'
          | 'vi'
          | 'zh-hans'
          | 'zh-hant'
      }
    }
    responses: {
      200: {
        content: {
          'application/vnd.oai.openapi': { [key: string]: any }
          'application/yaml': { [key: string]: any }
        }
      }
    }
  }
  payment_methods_v1_list: {
    parameters: {
      query: {
        /** Number of results to return per page. */
        limit?: number
        /** The initial index from which to return the results. */
        offset?: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PaginatedStripeCardPaymentMethodList']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  /** Creates a setup intent that will eventually be confirmed client-side to create a payment method */
  payment_methods_v1_create: {
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['ClientSecret']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  payment_methods_v1_retrieve: {
    parameters: {
      path: {
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['StripeCardPaymentMethod']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  payment_methods_v1_update: {
    parameters: {
      path: {
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['StripeCardPaymentMethod']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePaymentMethodRequest']
        'application/x-www-form-urlencoded': components['schemas']['UpdatePaymentMethodRequest']
        'multipart/form-data': components['schemas']['UpdatePaymentMethodRequest']
      }
    }
  }
  payment_methods_v1_destroy: {
    parameters: {
      path: {
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['StripeCardPaymentMethod']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  payment_methods_v1_partial_update: {
    parameters: {
      path: {
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['StripeCardPaymentMethod']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchedUpdatePaymentMethodRequest']
        'application/x-www-form-urlencoded': components['schemas']['PatchedUpdatePaymentMethodRequest']
        'multipart/form-data': components['schemas']['PatchedUpdatePaymentMethodRequest']
      }
    }
  }
  /** Confirm card for a payment method and set as default if none exist. */
  payment_methods_v1_confirm_create: {
    parameters: {
      path: {
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['StripeCardPaymentMethod']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SetupIntentConfirmRequest']
        'application/x-www-form-urlencoded': components['schemas']['SetupIntentConfirmRequest']
        'multipart/form-data': components['schemas']['SetupIntentConfirmRequest']
      }
    }
  }
  plans_v1_list: {
    parameters: {
      query: {
        is_active?: boolean
        is_public?: boolean
        is_trial_allowed?: boolean
        /** Number of results to return per page. */
        limit?: number
        name?: string
        /** The initial index from which to return the results. */
        offset?: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PaginatedPlanList']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  /** Add a feature and optionally specification to a plan by specifying a `feature_id` and `spec_id` in the list of features. */
  plans_v1_create: {
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['Plan']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PlanRequest']
        'application/x-www-form-urlencoded': components['schemas']['PlanRequest']
        'multipart/form-data': components['schemas']['PlanRequest']
      }
    }
  }
  plans_v1_retrieve: {
    parameters: {
      path: {
        /** A UUID string identifying this plan. */
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Plan']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  /** Remove a feature and spec from a plan by specifying `id` and `is_active: false` in the plan feature list in an update operation.  An empty list for PUT or PATCH does nothing.  A PlanFeature cannot change which feature or spec once created. A deactivated PlanFeature can be reactivated by setting `is_active: true`. */
  plans_v1_update: {
    parameters: {
      path: {
        /** A UUID string identifying this plan. */
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Plan']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PlanRequest']
        'application/x-www-form-urlencoded': components['schemas']['PlanRequest']
        'multipart/form-data': components['schemas']['PlanRequest']
      }
    }
  }
  plans_v1_destroy: {
    parameters: {
      path: {
        /** A UUID string identifying this plan. */
        id: string
      }
    }
    responses: {
      /** No response body */
      204: never
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  plans_v1_partial_update: {
    parameters: {
      path: {
        /** A UUID string identifying this plan. */
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Plan']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchedPlanRequest']
        'application/x-www-form-urlencoded': components['schemas']['PatchedPlanRequest']
        'multipart/form-data': components['schemas']['PatchedPlanRequest']
      }
    }
  }
  /** Handle contact us form data for Enterprise style plans. */
  plans_v1_contact_us_create: {
    responses: {
      /** No response body */
      200: unknown
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PlanContactFormRequest']
        'application/x-www-form-urlencoded': components['schemas']['PlanContactFormRequest']
        'multipart/form-data': components['schemas']['PlanContactFormRequest']
      }
    }
  }
  providers_v1_list: {
    parameters: {
      query: {
        /** Number of results to return per page. */
        limit?: number
        /** The initial index from which to return the results. */
        offset?: number
        slug?: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PaginatedProviderList']
        }
      }
    }
  }
  providers_v1_create: {
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['Provider']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ProviderRequest']
        'application/x-www-form-urlencoded': components['schemas']['ProviderRequest']
        'multipart/form-data': components['schemas']['ProviderRequest']
      }
    }
  }
  providers_v1_retrieve: {
    parameters: {
      path: {
        /** A UUID string identifying this provider. */
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Provider']
        }
      }
    }
  }
  providers_v1_update: {
    parameters: {
      path: {
        /** A UUID string identifying this provider. */
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Provider']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ProviderRequest']
        'application/x-www-form-urlencoded': components['schemas']['ProviderRequest']
        'multipart/form-data': components['schemas']['ProviderRequest']
      }
    }
  }
  providers_v1_destroy: {
    parameters: {
      path: {
        /** A UUID string identifying this provider. */
        id: string
      }
    }
    responses: {
      /** No response body */
      204: never
    }
  }
  providers_v1_partial_update: {
    parameters: {
      path: {
        /** A UUID string identifying this provider. */
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Provider']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchedProviderRequest']
        'application/x-www-form-urlencoded': components['schemas']['PatchedProviderRequest']
        'multipart/form-data': components['schemas']['PatchedProviderRequest']
      }
    }
  }
  providers_v1_stripe_retrieve: {
    parameters: {
      path: {
        /** A UUID string identifying this provider. */
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Provider']
        }
      }
    }
  }
  providers_v1_stripe_create: {
    parameters: {
      path: {
        /** A UUID string identifying this provider. */
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Provider']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ProviderRequest']
        'application/x-www-form-urlencoded': components['schemas']['ProviderRequest']
        'multipart/form-data': components['schemas']['ProviderRequest']
      }
    }
  }
  providers_v1_slug_retrieve: {
    parameters: {
      query: {
        slug?: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Slug']
        }
      }
    }
  }
  subscribe_intents_v1_list: {
    parameters: {
      query: {
        /** Number of results to return per page. */
        limit?: number
        /** The initial index from which to return the results. */
        offset?: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PaginatedSubscribeIntentList']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  subscribe_intents_v1_create: {
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['SubscribeIntent']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateSubscribeIntentRequest']
        'application/x-www-form-urlencoded': components['schemas']['CreateSubscribeIntentRequest']
        'multipart/form-data': components['schemas']['CreateSubscribeIntentRequest']
      }
    }
  }
  subscribe_intents_v1_retrieve: {
    parameters: {
      path: {
        /** A UUID string identifying this subscribe intent. */
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SubscribeIntent']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  subscribe_intents_v1_update: {
    parameters: {
      path: {
        /** A UUID string identifying this subscribe intent. */
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SubscribeIntent']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SubscribeIntentRequest']
        'application/x-www-form-urlencoded': components['schemas']['SubscribeIntentRequest']
        'multipart/form-data': components['schemas']['SubscribeIntentRequest']
      }
    }
  }
  subscribe_intents_v1_destroy: {
    parameters: {
      path: {
        /** A UUID string identifying this subscribe intent. */
        id: string
      }
    }
    responses: {
      /** No response body */
      204: never
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  subscribe_intents_v1_partial_update: {
    parameters: {
      path: {
        /** A UUID string identifying this subscribe intent. */
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SubscribeIntent']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchedSubscribeIntentRequest']
        'application/x-www-form-urlencoded': components['schemas']['PatchedSubscribeIntentRequest']
        'multipart/form-data': components['schemas']['PatchedSubscribeIntentRequest']
      }
    }
  }
  /**
   * Confirm a subscription intent.
   *
   * If the intent is still valid, charge the payment method associated with
   * the intent and create or update a team's subscription.
   */
  subscribe_intents_v1_confirm_create: {
    parameters: {
      path: {
        /** A UUID string identifying this subscribe intent. */
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SubscriptionDetail']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  subscriptions_v1_list: {
    parameters: {
      query: {
        /** Search subscriptions by team member email. */
        customer_email?: string
        is_active?: boolean
        /** Number of results to return per page. */
        limit?: number
        /** The initial index from which to return the results. */
        offset?: number
        plan_id?: string
        team_id?: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PaginatedSubscriptionList']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  subscriptions_v1_create: {
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['Subscription']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SubscriptionRequest']
        'application/x-www-form-urlencoded': components['schemas']['SubscriptionRequest']
        'multipart/form-data': components['schemas']['SubscriptionRequest']
      }
    }
  }
  subscriptions_v1_retrieve: {
    parameters: {
      path: {
        /** A UUID string identifying this subscription. */
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SubscriptionDetail']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  subscriptions_v1_update: {
    parameters: {
      path: {
        /** A UUID string identifying this subscription. */
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SubscriptionDetail']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SubscriptionRequest']
        'application/x-www-form-urlencoded': components['schemas']['SubscriptionRequest']
        'multipart/form-data': components['schemas']['SubscriptionRequest']
      }
    }
  }
  subscriptions_v1_destroy: {
    parameters: {
      path: {
        /** A UUID string identifying this subscription. */
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SubscriptionDetail']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  subscriptions_v1_partial_update: {
    parameters: {
      path: {
        /** A UUID string identifying this subscription. */
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SubscriptionDetail']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchedSubscriptionRequest']
        'application/x-www-form-urlencoded': components['schemas']['PatchedSubscriptionRequest']
        'multipart/form-data': components['schemas']['PatchedSubscriptionRequest']
      }
    }
  }
  /**
   * In future version, this endpoint will not return the subscription that
   * was purged.
   */
  subscriptions_v1_purge_destroy: {
    parameters: {
      path: {
        /** A UUID string identifying this subscription. */
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SubscriptionDetail']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  subscriptions_v1_renew_partial_update: {
    parameters: {
      path: {
        /** A UUID string identifying this subscription. */
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SubscriptionDetail']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  subscriptions_v1_report_create: {
    parameters: {
      path: {
        /** A UUID string identifying this subscription. */
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Usage']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ReportUsageRequest']
        'application/x-www-form-urlencoded': components['schemas']['ReportUsageRequest']
        'multipart/form-data': components['schemas']['ReportUsageRequest']
      }
    }
  }
  subscriptions_v1_switch_partial_update: {
    parameters: {
      path: {
        /** A UUID string identifying this subscription. */
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SubscriptionDetail']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchedPlanSwitchRequest']
        'application/x-www-form-urlencoded': components['schemas']['PatchedPlanSwitchRequest']
        'multipart/form-data': components['schemas']['PatchedPlanSwitchRequest']
      }
    }
  }
  subscriptions_v1_usage_list: {
    parameters: {
      query: {
        /** Search subscriptions by team member email. */
        customer_email?: string
        is_active?: boolean
        plan_id?: string
        team_id?: string
      }
      path: {
        /** A UUID string identifying this subscription. */
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Usage'][]
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  /** Convenience endpoint so providers don't need to loop through usages. */
  subscriptions_v1_usage_exceeded_retrieve: {
    parameters: {
      path: {
        /** A UUID string identifying this subscription. */
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Subscription']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  subscriptions_v1_usages_list: {
    parameters: {
      query: {
        /** Number of results to return per page. */
        limit?: number
        /** The initial index from which to return the results. */
        offset?: number
      }
      path: {
        subscription_pk: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PaginatedUsageRecordList']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  subscriptions_v1_usages_create: {
    parameters: {
      path: {
        subscription_pk: string
      }
    }
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['UsageRecord']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateUsageRequest']
        'application/x-www-form-urlencoded': components['schemas']['CreateUsageRequest']
        'multipart/form-data': components['schemas']['CreateUsageRequest']
      }
    }
  }
  subscriptions_v1_usages_retrieve: {
    parameters: {
      path: {
        /** A UUID string identifying this usage metric. */
        id: string
        subscription_pk: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['UsageRecord']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  subscriptions_v1_usages_update: {
    parameters: {
      path: {
        /** A UUID string identifying this usage metric. */
        id: string
        subscription_pk: string
      }
    }
    responses: {
      /** No response body */
      200: unknown
    }
  }
  subscriptions_v1_usages_destroy: {
    parameters: {
      path: {
        /** A UUID string identifying this usage metric. */
        id: string
        subscription_pk: string
      }
    }
    responses: {
      /** No response body */
      204: never
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  subscriptions_v1_usages_partial_update: {
    parameters: {
      path: {
        /** A UUID string identifying this usage metric. */
        id: string
        subscription_pk: string
      }
    }
    responses: {
      /** No response body */
      200: unknown
    }
  }
  /**
   * As a Customer, access memberships for all your teams.
   * As a Provider, full admin access to teams.
   */
  team_memberships_v1_list: {
    parameters: {
      query: {
        customer_id?: string
        /** Number of results to return per page. */
        limit?: number
        /** The initial index from which to return the results. */
        offset?: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PaginatedMembershipList']
        }
      }
    }
  }
  /**
   * As a Customer, access memberships for all your teams.
   * As a Provider, full admin access to teams.
   */
  team_memberships_v1_create: {
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['Membership']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateMembershipRequest']
        'application/x-www-form-urlencoded': components['schemas']['CreateMembershipRequest']
        'multipart/form-data': components['schemas']['CreateMembershipRequest']
      }
    }
  }
  /**
   * As a Customer, access memberships for all your teams.
   * As a Provider, full admin access to teams.
   */
  team_memberships_v1_retrieve: {
    parameters: {
      path: {
        /** A UUID string identifying this team membership. */
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Membership']
        }
      }
    }
  }
  /**
   * As a Customer, access memberships for all your teams.
   * As a Provider, full admin access to teams.
   */
  team_memberships_v1_update: {
    parameters: {
      path: {
        /** A UUID string identifying this team membership. */
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Membership']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['MembershipRequest']
        'application/x-www-form-urlencoded': components['schemas']['MembershipRequest']
        'multipart/form-data': components['schemas']['MembershipRequest']
      }
    }
  }
  /**
   * As a Customer, access memberships for all your teams.
   * As a Provider, full admin access to teams.
   */
  team_memberships_v1_destroy: {
    parameters: {
      path: {
        /** A UUID string identifying this team membership. */
        id: string
      }
    }
    responses: {
      /** No response body */
      204: never
    }
  }
  /**
   * As a Customer, access memberships for all your teams.
   * As a Provider, full admin access to teams.
   */
  team_memberships_v1_partial_update: {
    parameters: {
      path: {
        /** A UUID string identifying this team membership. */
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Membership']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchedMembershipRequest']
        'application/x-www-form-urlencoded': components['schemas']['PatchedMembershipRequest']
        'multipart/form-data': components['schemas']['PatchedMembershipRequest']
      }
    }
  }
  /** Teams can be filtered by metadata using query parameters.  Teams match if they have all of the key value pairs specified. */
  teams_v1_list: {
    parameters: {
      query: {
        /** Include teams that have this key in their metadata.  Can be paired with `value`. */
        key?: string
        /** Number of results to return per page. */
        limit?: number
        /** The initial index from which to return the results. */
        offset?: number
        /** Include teams that have this value in their metadata.  Can be paired with `key`. */
        value?: string
        /** Search for teams by member email. */
        with_member_email?: string
        /** Search for teams by name. */
        with_name?: string
        /** Search for teams by subscription plan name. */
        with_plan_name?: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PaginatedTeamList']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  teams_v1_create: {
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['TeamDetail']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TeamDetailRequest']
        'application/x-www-form-urlencoded': components['schemas']['TeamDetailRequest']
        'multipart/form-data': components['schemas']['TeamDetailRequest']
      }
    }
  }
  teams_v1_retrieve: {
    parameters: {
      path: {
        /** A UUID string identifying this team. */
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TeamDetail']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  teams_v1_update: {
    parameters: {
      path: {
        /** A UUID string identifying this team. */
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TeamDetail']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TeamDetailRequest']
        'application/x-www-form-urlencoded': components['schemas']['TeamDetailRequest']
        'multipart/form-data': components['schemas']['TeamDetailRequest']
      }
    }
  }
  teams_v1_destroy: {
    parameters: {
      path: {
        /** A UUID string identifying this team. */
        id: string
      }
    }
    responses: {
      /** No response body */
      204: never
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  teams_v1_partial_update: {
    parameters: {
      path: {
        /** A UUID string identifying this team. */
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TeamDetail']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchedTeamDetailRequest']
        'application/x-www-form-urlencoded': components['schemas']['PatchedTeamDetailRequest']
        'multipart/form-data': components['schemas']['PatchedTeamDetailRequest']
      }
    }
  }
  teams_v1_metadata_retrieve: {
    parameters: {
      path: {
        /** A UUID string identifying this team. */
        id: string
      }
      query: {
        /** Include only metadata with these keys. */
        key?: string
        /** Include only metadata with these values. */
        value?: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Metadata']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  teams_v1_metadata_create: {
    parameters: {
      path: {
        /** A UUID string identifying this team. */
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Metadata']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['MetadataRequest']
        'application/x-www-form-urlencoded': components['schemas']['MetadataRequest']
        'multipart/form-data': components['schemas']['MetadataRequest']
      }
    }
  }
  teams_v1_metadata_partial_update: {
    parameters: {
      path: {
        /** A UUID string identifying this team. */
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Metadata']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchedMetadataRequest']
        'application/x-www-form-urlencoded': components['schemas']['PatchedMetadataRequest']
        'multipart/form-data': components['schemas']['PatchedMetadataRequest']
      }
    }
  }
  teams_v1_invoices_list: {
    parameters: {
      query: {
        /** Number of results to return per page. */
        limit?: number
        /** The initial index from which to return the results. */
        offset?: number
        state?: 'C' | 'D' | 'O' | 'P' | 'V'
      }
      path: {
        team_pk: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PaginatedInvoiceList']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  teams_v1_invoices_create: {
    parameters: {
      path: {
        team_pk: string
      }
    }
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['Invoice']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['InvoiceRequest']
        'application/x-www-form-urlencoded': components['schemas']['InvoiceRequest']
        'multipart/form-data': components['schemas']['InvoiceRequest']
      }
    }
  }
  teams_v1_invoices_retrieve: {
    parameters: {
      path: {
        /** A UUID string identifying this invoice. */
        id: string
        team_pk: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Invoice']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  teams_v1_invoices_update: {
    parameters: {
      path: {
        /** A UUID string identifying this invoice. */
        id: string
        team_pk: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Invoice']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['InvoiceRequest']
        'application/x-www-form-urlencoded': components['schemas']['InvoiceRequest']
        'multipart/form-data': components['schemas']['InvoiceRequest']
      }
    }
  }
  teams_v1_invoices_destroy: {
    parameters: {
      path: {
        /** A UUID string identifying this invoice. */
        id: string
        team_pk: string
      }
    }
    responses: {
      /** No response body */
      204: never
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  teams_v1_invoices_partial_update: {
    parameters: {
      path: {
        /** A UUID string identifying this invoice. */
        id: string
        team_pk: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Invoice']
        }
      }
      '4XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      '5XX': {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchedInvoiceRequest']
        'application/x-www-form-urlencoded': components['schemas']['PatchedInvoiceRequest']
        'multipart/form-data': components['schemas']['PatchedInvoiceRequest']
      }
    }
  }
  /** Management of Provider Tokens. */
  tokens_v1_list: {
    parameters: {
      query: {
        is_active?: boolean
        is_public?: boolean
        /** Number of results to return per page. */
        limit?: number
        /** The initial index from which to return the results. */
        offset?: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PaginatedTokenList']
        }
      }
    }
  }
  /** Management of Provider Tokens. */
  tokens_v1_create: {
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['Token']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TokenRequest']
        'application/x-www-form-urlencoded': components['schemas']['TokenRequest']
        'multipart/form-data': components['schemas']['TokenRequest']
      }
    }
  }
  /** Management of Provider Tokens. */
  tokens_v1_retrieve: {
    parameters: {
      path: {
        /** A UUID string identifying this provider token. */
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Token']
        }
      }
    }
  }
  /** Management of Provider Tokens. */
  tokens_v1_update: {
    parameters: {
      path: {
        /** A UUID string identifying this provider token. */
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Token']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TokenRequest']
        'application/x-www-form-urlencoded': components['schemas']['TokenRequest']
        'multipart/form-data': components['schemas']['TokenRequest']
      }
    }
  }
  /** Management of Provider Tokens. */
  tokens_v1_destroy: {
    parameters: {
      path: {
        /** A UUID string identifying this provider token. */
        id: string
      }
    }
    responses: {
      /** No response body */
      204: never
    }
  }
  /** Management of Provider Tokens. */
  tokens_v1_partial_update: {
    parameters: {
      path: {
        /** A UUID string identifying this provider token. */
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Token']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchedTokenRequest']
        'application/x-www-form-urlencoded': components['schemas']['PatchedTokenRequest']
        'multipart/form-data': components['schemas']['PatchedTokenRequest']
      }
    }
  }
}

export interface external {}
